{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\Dylan\\WebstormProjects\\Themoviedb\\Themoviedb\\packages\\logging\\logging.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/logging/logging.js","filename":"C:\\Users\\Dylan\\WebstormProjects\\Themoviedb\\Themoviedb\\packages\\logging\\logging.js","cloneInputAst":true,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\Dylan\\WebstormProjects\\Themoviedb\\Themoviedb","root":"C:\\Users\\Dylan\\WebstormProjects\\Themoviedb\\Themoviedb","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.12.5","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\Dylan\\WebstormProjects\\Themoviedb\\Themoviedb\\packages\\logging\\logging.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/logging/logging.js"}},"code":"var _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\n\nvar _createForOfIteratorHelperLoose;\n\nmodule.link(\"@babel/runtime/helpers/createForOfIteratorHelperLoose\", {\n  default: function (v) {\n    _createForOfIteratorHelperLoose = v;\n  }\n}, 1);\n\nvar _typeof;\n\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 2);\nmodule.export({\n  Log: function () {\n    return Log;\n  }\n});\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 0);\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Log() {\n  Log.info.apply(Log, arguments);\n} /// FOR TESTING\n\n\nvar intercept = 0;\nvar interceptedLines = [];\nvar suppress = 0; // Intercept the next 'count' calls to a Log function. The actual\n// lines printed to the console can be cleared and read by calling\n// Log._intercepted().\n\nLog._intercept = function (count) {\n  intercept += count;\n}; // Suppress the next 'count' calls to a Log function. Use this to stop\n// tests from spamming the console, especially with red errors that\n// might look like a failing test.\n\n\nLog._suppress = function (count) {\n  suppress += count;\n}; // Returns intercepted lines and resets the intercept counter.\n\n\nLog._intercepted = function () {\n  var lines = interceptedLines;\n  interceptedLines = [];\n  intercept = 0;\n  return lines;\n}; // Either 'json' or 'colored-text'.\n//\n// When this is set to 'json', print JSON documents that are parsed by another\n// process ('satellite' or 'meteor run'). This other process should call\n// 'Log.format' for nice output.\n//\n// When this is set to 'colored-text', call 'Log.format' before printing.\n// This should be used for logging from within satellite, since there is no\n// other process that will be reading its standard output.\n\n\nLog.outputFormat = 'json';\nvar LEVEL_COLORS = {\n  debug: 'green',\n  // leave info as the default color\n  warn: 'magenta',\n  error: 'red'\n};\nvar META_COLOR = 'blue'; // Default colors cause readability problems on Windows Powershell,\n// switch to bright variants. While still capable of millions of\n// operations per second, the benchmark showed a 25%+ increase in\n// ops per second (on Node 8) by caching \"process.platform\".\n\nvar isWin32 = (typeof process === \"undefined\" ? \"undefined\" : _typeof(process)) === 'object' && process.platform === 'win32';\n\nvar platformColor = function (color) {\n  if (isWin32 && typeof color === 'string' && !color.endsWith('Bright')) {\n    return color + \"Bright\";\n  }\n\n  return color;\n}; // XXX package\n\n\nvar RESTRICTED_KEYS = ['time', 'timeInexact', 'level', 'file', 'line', 'program', 'originApp', 'satellite', 'stderr'];\nvar FORMATTED_KEYS = [].concat(RESTRICTED_KEYS, ['app', 'message']);\n\nvar logInBrowser = function (obj) {\n  var str = Log.format(obj); // XXX Some levels should be probably be sent to the server\n\n  var level = obj.level;\n\n  if (typeof console !== 'undefined' && console[level]) {\n    console[level](str);\n  } else {\n    // XXX Uses of Meteor._debug should probably be replaced by Log.debug or\n    //     Log.info, and we should have another name for \"do your best to\n    //     call call console.log\".\n    Meteor._debug(str);\n  }\n}; // @returns {Object: { line: Number, file: String }}\n\n\nLog._getCallerDetails = function () {\n  var getStack = function () {\n    // We do NOT use Error.prepareStackTrace here (a V8 extension that gets us a\n    // pre-parsed stack) since it's impossible to compose it with the use of\n    // Error.prepareStackTrace used on the server for source maps.\n    var err = new Error();\n    var stack = err.stack;\n    return stack;\n  };\n\n  var stack = getStack();\n\n  if (!stack) {\n    return {};\n  } // looking for the first line outside the logging package (or an\n  // eval if we find that first)\n\n\n  var line;\n  var lines = stack.split('\\n').slice(1);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(lines), _step; !(_step = _iterator()).done;) {\n    line = _step.value;\n\n    if (line.match(/^\\s*at eval \\(eval/)) {\n      return {\n        file: \"eval\"\n      };\n    }\n\n    if (!line.match(/packages\\/(?:local-test[:_])?logging(?:\\/|\\.js)/)) {\n      break;\n    }\n  }\n\n  var details = {}; // The format for FF is 'functionName@filePath:lineNumber'\n  // The format for V8 is 'functionName (packages/logging/logging.js:81)' or\n  //                      'packages/logging/logging.js:81'\n\n  var match = /(?:[@(]| at )([^(]+?):([0-9:]+)(?:\\)|$)/.exec(line);\n\n  if (!match) {\n    return details;\n  } // in case the matched block here is line:column\n\n\n  details.line = match[2].split(':')[0]; // Possible format: https://foo.bar.com/scripts/file.js?random=foobar\n  // XXX: if you can write the following in better way, please do it\n  // XXX: what about evals?\n\n  details.file = match[1].split('/').slice(-1)[0].split('?')[0];\n  return details;\n};\n\n['debug', 'info', 'warn', 'error'].forEach(function (level) {\n  // @param arg {String|Object}\n  Log[level] = function (arg) {\n    if (suppress) {\n      suppress--;\n      return;\n    }\n\n    var intercepted = false;\n\n    if (intercept) {\n      intercept--;\n      intercepted = true;\n    }\n\n    var obj = arg === Object(arg) && !(arg instanceof RegExp) && !(arg instanceof Date) ? arg : {\n      message: new String(arg).toString()\n    };\n    RESTRICTED_KEYS.forEach(function (key) {\n      if (obj[key]) {\n        throw new Error(\"Can't set '\" + key + \"' in log message\");\n      }\n    });\n\n    if (hasOwn.call(obj, 'message') && typeof obj.message !== 'string') {\n      throw new Error(\"The 'message' field in log objects must be a string\");\n    }\n\n    if (!obj.omitCallerDetails) {\n      obj = _objectSpread(_objectSpread({}, Log._getCallerDetails()), obj);\n    }\n\n    obj.time = new Date();\n    obj.level = level; // If we are in production don't write out debug logs.\n\n    if (level === 'debug' && Meteor.isProduction) {\n      return;\n    }\n\n    if (intercepted) {\n      interceptedLines.push(EJSON.stringify(obj));\n    } else if (Meteor.isServer) {\n      if (Log.outputFormat === 'colored-text') {\n        console.log(Log.format(obj, {\n          color: true\n        }));\n      } else if (Log.outputFormat === 'json') {\n        console.log(EJSON.stringify(obj));\n      } else {\n        throw new Error(\"Unknown logging output format: \" + Log.outputFormat);\n      }\n    } else {\n      logInBrowser(obj);\n    }\n  };\n}); // tries to parse line as EJSON. returns object if parse is successful, or null if not\n\nLog.parse = function (line) {\n  var obj = null;\n\n  if (line && line.startsWith('{')) {\n    // might be json generated from calling 'Log'\n    try {\n      obj = EJSON.parse(line);\n    } catch (e) {}\n  } // XXX should probably check fields other than 'time'\n\n\n  if (obj && obj.time && obj.time instanceof Date) {\n    return obj;\n  } else {\n    return null;\n  }\n}; // formats a log object into colored human and machine-readable text\n\n\nLog.format = function (obj) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  obj = _objectSpread({}, obj); // don't mutate the argument\n\n  var _obj = obj,\n      time = _obj.time,\n      timeInexact = _obj.timeInexact,\n      _obj$level = _obj.level,\n      level = _obj$level === void 0 ? 'info' : _obj$level,\n      file = _obj.file,\n      lineNumber = _obj.line,\n      _obj$app = _obj.app,\n      appName = _obj$app === void 0 ? '' : _obj$app,\n      originApp = _obj.originApp,\n      _obj$message = _obj.message,\n      message = _obj$message === void 0 ? '' : _obj$message,\n      _obj$program = _obj.program,\n      program = _obj$program === void 0 ? '' : _obj$program,\n      _obj$satellite = _obj.satellite,\n      satellite = _obj$satellite === void 0 ? '' : _obj$satellite,\n      _obj$stderr = _obj.stderr,\n      stderr = _obj$stderr === void 0 ? '' : _obj$stderr;\n\n  if (!(time instanceof Date)) {\n    throw new Error(\"'time' must be a Date object\");\n  }\n\n  FORMATTED_KEYS.forEach(function (key) {\n    delete obj[key];\n  });\n\n  if (Object.keys(obj).length > 0) {\n    if (message) {\n      message += ' ';\n    }\n\n    message += EJSON.stringify(obj);\n  }\n\n  var pad2 = function (n) {\n    return n.toString().padStart(2, '0');\n  };\n\n  var pad3 = function (n) {\n    return n.toString().padStart(3, '0');\n  };\n\n  var dateStamp = time.getFullYear().toString() + pad2(time.getMonth() + 1\n  /*0-based*/\n  ) + pad2(time.getDate());\n  var timeStamp = pad2(time.getHours()) + ':' + pad2(time.getMinutes()) + ':' + pad2(time.getSeconds()) + '.' + pad3(time.getMilliseconds()); // eg in San Francisco in June this will be '(-7)'\n\n  var utcOffsetStr = \"(\" + -(new Date().getTimezoneOffset() / 60) + \")\";\n  var appInfo = '';\n\n  if (appName) {\n    appInfo += appName;\n  }\n\n  if (originApp && originApp !== appName) {\n    appInfo += \" via \" + originApp;\n  }\n\n  if (appInfo) {\n    appInfo = \"[\" + appInfo + \"] \";\n  }\n\n  var sourceInfoParts = [];\n\n  if (program) {\n    sourceInfoParts.push(program);\n  }\n\n  if (file) {\n    sourceInfoParts.push(file);\n  }\n\n  if (lineNumber) {\n    sourceInfoParts.push(lineNumber);\n  }\n\n  var sourceInfo = !sourceInfoParts.length ? '' : \"(\" + sourceInfoParts.join(':') + \") \";\n  if (satellite) sourceInfo += \"[\" + satellite + \"]\";\n  var stderrIndicator = stderr ? '(STDERR) ' : '';\n  var metaPrefix = [level.charAt(0).toUpperCase(), dateStamp, '-', timeStamp, utcOffsetStr, timeInexact ? '? ' : ' ', appInfo, sourceInfo, stderrIndicator].join('');\n\n  var prettify = function (line, color) {\n    return options.color && Meteor.isServer && color ? require('cli-color')[color](line) : line;\n  };\n\n  return prettify(metaPrefix, platformColor(options.metaColor || META_COLOR)) + prettify(message, platformColor(LEVEL_COLORS[level]));\n}; // Turn a line of text into a loggable object.\n// @param line {String}\n// @param override {Object}\n\n\nLog.objFromText = function (line, override) {\n  return _objectSpread({\n    message: line,\n    level: 'info',\n    time: new Date(),\n    timeInexact: true\n  }, override);\n};","map":{"version":3,"sources":["packages/logging/logging.js"],"names":["_objectSpread","module","link","default","v","_createForOfIteratorHelperLoose","_typeof","export","Log","Meteor","hasOwn","Object","prototype","hasOwnProperty","info","intercept","interceptedLines","suppress","_intercept","count","_suppress","_intercepted","lines","outputFormat","LEVEL_COLORS","debug","warn","error","META_COLOR","isWin32","process","platform","platformColor","color","endsWith","RESTRICTED_KEYS","FORMATTED_KEYS","logInBrowser","obj","str","format","level","console","_debug","_getCallerDetails","getStack","err","Error","stack","line","split","slice","match","file","details","exec","forEach","arg","intercepted","RegExp","Date","message","String","toString","key","call","omitCallerDetails","time","isProduction","push","EJSON","stringify","isServer","log","parse","startsWith","e","options","timeInexact","lineNumber","app","appName","originApp","program","satellite","stderr","keys","length","pad2","n","padStart","pad3","dateStamp","getFullYear","getMonth","getDate","timeStamp","getHours","getMinutes","getSeconds","getMilliseconds","utcOffsetStr","getTimezoneOffset","appInfo","sourceInfoParts","sourceInfo","join","stderrIndicator","metaPrefix","charAt","toUpperCase","prettify","require","metaColor","objFromText","override"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Log(...args) {\n  Log.info(...args);\n}\n\n/// FOR TESTING\nlet intercept = 0;\nlet interceptedLines = [];\nlet suppress = 0;\n\n// Intercept the next 'count' calls to a Log function. The actual\n// lines printed to the console can be cleared and read by calling\n// Log._intercepted().\nLog._intercept = (count) => {\n  intercept += count;\n};\n\n// Suppress the next 'count' calls to a Log function. Use this to stop\n// tests from spamming the console, especially with red errors that\n// might look like a failing test.\nLog._suppress = (count) => {\n  suppress += count;\n};\n\n// Returns intercepted lines and resets the intercept counter.\nLog._intercepted = () => {\n  const lines = interceptedLines;\n  interceptedLines = [];\n  intercept = 0;\n  return lines;\n};\n\n// Either 'json' or 'colored-text'.\n//\n// When this is set to 'json', print JSON documents that are parsed by another\n// process ('satellite' or 'meteor run'). This other process should call\n// 'Log.format' for nice output.\n//\n// When this is set to 'colored-text', call 'Log.format' before printing.\n// This should be used for logging from within satellite, since there is no\n// other process that will be reading its standard output.\nLog.outputFormat = 'json';\n\nconst LEVEL_COLORS = {\n  debug: 'green',\n  // leave info as the default color\n  warn: 'magenta',\n  error: 'red'\n};\n\nconst META_COLOR = 'blue';\n\n// Default colors cause readability problems on Windows Powershell,\n// switch to bright variants. While still capable of millions of\n// operations per second, the benchmark showed a 25%+ increase in\n// ops per second (on Node 8) by caching \"process.platform\".\nconst isWin32 = typeof process === 'object' && process.platform === 'win32';\nconst platformColor = (color) => {\n  if (isWin32 && typeof color === 'string' && !color.endsWith('Bright')) {\n    return `${color}Bright`;\n  }\n  return color;\n};\n\n// XXX package\nconst RESTRICTED_KEYS = ['time', 'timeInexact', 'level', 'file', 'line',\n                        'program', 'originApp', 'satellite', 'stderr'];\n\nconst FORMATTED_KEYS = [...RESTRICTED_KEYS, 'app', 'message'];\n\nconst logInBrowser = obj => {\n  const str = Log.format(obj);\n\n  // XXX Some levels should be probably be sent to the server\n  const level = obj.level;\n\n  if ((typeof console !== 'undefined') && console[level]) {\n    console[level](str);\n  } else {\n    // XXX Uses of Meteor._debug should probably be replaced by Log.debug or\n    //     Log.info, and we should have another name for \"do your best to\n    //     call call console.log\".\n    Meteor._debug(str);\n  }\n};\n\n// @returns {Object: { line: Number, file: String }}\nLog._getCallerDetails = () => {\n  const getStack = () => {\n    // We do NOT use Error.prepareStackTrace here (a V8 extension that gets us a\n    // pre-parsed stack) since it's impossible to compose it with the use of\n    // Error.prepareStackTrace used on the server for source maps.\n    const err = new Error;\n    const stack = err.stack;\n    return stack;\n  };\n\n  const stack = getStack();\n\n  if (!stack) {\n    return {};\n  }\n\n  // looking for the first line outside the logging package (or an\n  // eval if we find that first)\n  let line;\n  const lines = stack.split('\\n').slice(1);\n  for (line of lines) {\n    if (line.match(/^\\s*at eval \\(eval/)) {\n      return {file: \"eval\"};\n    }\n\n    if (!line.match(/packages\\/(?:local-test[:_])?logging(?:\\/|\\.js)/)) {\n      break;\n    }\n  }\n\n  const details = {};\n\n  // The format for FF is 'functionName@filePath:lineNumber'\n  // The format for V8 is 'functionName (packages/logging/logging.js:81)' or\n  //                      'packages/logging/logging.js:81'\n  const match = /(?:[@(]| at )([^(]+?):([0-9:]+)(?:\\)|$)/.exec(line);\n  if (!match) {\n    return details;\n  }\n\n  // in case the matched block here is line:column\n  details.line = match[2].split(':')[0];\n\n  // Possible format: https://foo.bar.com/scripts/file.js?random=foobar\n  // XXX: if you can write the following in better way, please do it\n  // XXX: what about evals?\n  details.file = match[1].split('/').slice(-1)[0].split('?')[0];\n\n  return details;\n};\n\n['debug', 'info', 'warn', 'error'].forEach((level) => {\n // @param arg {String|Object}\n Log[level] = (arg) => {\n  if (suppress) {\n    suppress--;\n    return;\n  }\n\n  let intercepted = false;\n  if (intercept) {\n    intercept--;\n    intercepted = true;\n  }\n\n  let obj = (arg === Object(arg)\n    && !(arg instanceof RegExp)\n    && !(arg instanceof Date))\n    ? arg\n    : { message: new String(arg).toString() };\n\n  RESTRICTED_KEYS.forEach(key => {\n    if (obj[key]) {\n      throw new Error(`Can't set '${key}' in log message`);\n    }\n  });\n\n  if (hasOwn.call(obj, 'message') && typeof obj.message !== 'string') {\n    throw new Error(\"The 'message' field in log objects must be a string\");\n  }\n\n  if (!obj.omitCallerDetails) {\n    obj = { ...Log._getCallerDetails(), ...obj };\n  }\n\n  obj.time = new Date();\n  obj.level = level;\n\n  // If we are in production don't write out debug logs.\n  if (level === 'debug' && Meteor.isProduction) {\n    return;\n  }\n\n  if (intercepted) {\n    interceptedLines.push(EJSON.stringify(obj));\n  } else if (Meteor.isServer) {\n    if (Log.outputFormat === 'colored-text') {\n      console.log(Log.format(obj, {color: true}));\n    } else if (Log.outputFormat === 'json') {\n      console.log(EJSON.stringify(obj));\n    } else {\n      throw new Error(`Unknown logging output format: ${Log.outputFormat}`);\n    }\n  } else {\n    logInBrowser(obj);\n  }\n};\n});\n\n\n// tries to parse line as EJSON. returns object if parse is successful, or null if not\nLog.parse = (line) => {\n  let obj = null;\n  if (line && line.startsWith('{')) { // might be json generated from calling 'Log'\n    try { obj = EJSON.parse(line); } catch (e) {}\n  }\n\n  // XXX should probably check fields other than 'time'\n  if (obj && obj.time && (obj.time instanceof Date)) {\n    return obj;\n  } else {\n    return null;\n  }\n};\n\n// formats a log object into colored human and machine-readable text\nLog.format = (obj, options = {}) => {\n  obj = { ...obj }; // don't mutate the argument\n  let {\n    time,\n    timeInexact,\n    level = 'info',\n    file,\n    line: lineNumber,\n    app: appName = '',\n    originApp,\n    message = '',\n    program = '',\n    satellite = '',\n    stderr = '',\n  } = obj;\n\n  if (!(time instanceof Date)) {\n    throw new Error(\"'time' must be a Date object\");\n  }\n\n  FORMATTED_KEYS.forEach((key) => { delete obj[key]; });\n\n  if (Object.keys(obj).length > 0) {\n    if (message) {\n      message += ' ';\n    }\n    message += EJSON.stringify(obj);\n  }\n\n  const pad2 = n => n.toString().padStart(2, '0');\n  const pad3 = n => n.toString().padStart(3, '0');\n\n  const dateStamp = time.getFullYear().toString() +\n    pad2(time.getMonth() + 1 /*0-based*/) +\n    pad2(time.getDate());\n  const timeStamp = pad2(time.getHours()) +\n        ':' +\n        pad2(time.getMinutes()) +\n        ':' +\n        pad2(time.getSeconds()) +\n        '.' +\n        pad3(time.getMilliseconds());\n\n  // eg in San Francisco in June this will be '(-7)'\n  const utcOffsetStr = `(${(-(new Date().getTimezoneOffset() / 60))})`;\n\n  let appInfo = '';\n  if (appName) {\n    appInfo += appName;\n  }\n  if (originApp && originApp !== appName) {\n    appInfo += ` via ${originApp}`;\n  }\n  if (appInfo) {\n    appInfo = `[${appInfo}] `;\n  }\n\n  const sourceInfoParts = [];\n  if (program) {\n    sourceInfoParts.push(program);\n  }\n  if (file) {\n    sourceInfoParts.push(file);\n  }\n  if (lineNumber) {\n    sourceInfoParts.push(lineNumber);\n  }\n\n  let sourceInfo = !sourceInfoParts.length ?\n    '' : `(${sourceInfoParts.join(':')}) `;\n\n  if (satellite)\n    sourceInfo += `[${satellite}]`;\n\n  const stderrIndicator = stderr ? '(STDERR) ' : '';\n\n  const metaPrefix = [\n    level.charAt(0).toUpperCase(),\n    dateStamp,\n    '-',\n    timeStamp,\n    utcOffsetStr,\n    timeInexact ? '? ' : ' ',\n    appInfo,\n    sourceInfo,\n    stderrIndicator].join('');\n\n  const prettify = function (line, color) {\n    return (options.color && Meteor.isServer && color) ?\n      require('cli-color')[color](line) : line;\n  };\n\n  return prettify(metaPrefix, platformColor(options.metaColor || META_COLOR)) +\n    prettify(message, platformColor(LEVEL_COLORS[level]));\n};\n\n// Turn a line of text into a loggable object.\n// @param line {String}\n// @param override {Object}\nLog.objFromText = (line, override) => {\n  return {\n    message: line,\n    level: 'info',\n    time: new Date(),\n    timeInexact: true,\n    ...override\n  };\n};\n\nexport { Log };\n"]},"sourceType":"module","hash":"bd3675a61d9a90ac951d967e3c826100b5deab12"}
